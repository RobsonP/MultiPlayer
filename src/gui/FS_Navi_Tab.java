/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FS_Navi_Tab.java
 *
 * Created on 25.04.2012, 16:45:39
 */
package gui;

import control.MainControls;
import instance.Instance_data;
import instance.Instance_hold;
import java.awt.Color;
import java.awt.Container;
import java.awt.Point;
import java.awt.event.MouseListener;
import java.io.File;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.plaf.basic.BasicSliderUI;

/**
 *
 * @author RobsonP
 */
public class FS_Navi_Tab extends JDialog {
    private int vo_value = 0;
    private boolean stop = false, playcontrol = true;
    
    public FS_Navi_Tab() {
        try {    
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        initComponents();
        this.setOpacity(0.7f);        
        
        Color c = new Color(70,70,70);
        Container con = this.getContentPane();
        con.setBackground( c);
        
        try { 
            UIManager.setLookAndFeel("com.jtattoo.plaf.mint.MintLookAndFeel");
        } catch (IllegalAccessException | ClassNotFoundException | InstantiationException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider_Media = new javax.swing.JSlider();
        jLabel_vol = new javax.swing.JLabel();
        jSlider_vol = new javax.swing.JSlider();
        jLabel_time = new javax.swing.JLabel();
        jLabel_stop = new javax.swing.JLabel();
        jButton_fullscreen = new javax.swing.JButton();
        jLabel_play = new javax.swing.JLabel();
        jLabel_next = new javax.swing.JLabel();
        jLabel_prev = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setUndecorated(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });

        jSlider_Media.setMaximum(1000);
        MouseListener[] media_listeners = jSlider_Media.getMouseListeners();
        for (MouseListener l : media_listeners) jSlider_Media.removeMouseListener(l); // remove UI-installed TrackListener
        jSlider_Media.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jSlider_MediaMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jSlider_MediaMousePressed(evt);
            }
        });

        jLabel_vol.setForeground(new java.awt.Color(204, 204, 204));
        jLabel_vol.setText("Volume");
        jLabel_vol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_volMouseEntered(evt);
            }
        });

        /*
        final BasicSliderUI ui = (BasicSliderUI) jSlider_vol.getUI();
        BasicSliderUI.TrackListener tl = ui.new TrackListener() {
            // this is where we jump to absolute value of click
            @Override public void mouseClicked(MouseEvent e) {

            }
            // disable check that will invoke scrollDueToClickInTrack
            @Override public boolean shouldScroll(int dir) {
                return false;
            }
        };

        MouseListener[] listeners = jSlider_vol.getMouseListeners();
        for (MouseListener l : listeners) jSlider_vol.removeMouseListener(l); // remove UI-installed TrackListener
        jSlider_vol.addMouseListener(tl);
        */
        jSlider_vol.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jSlider_volMouseDragged(evt);
            }
        });
        jSlider_vol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jSlider_volMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jSlider_volMousePressed(evt);
            }
        });

        jLabel_time.setForeground(new java.awt.Color(204, 204, 204));
        jLabel_time.setText("0:00");
        jLabel_time.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_timeMouseEntered(evt);
            }
        });

        jLabel_stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/design/mcb_grey_stop_small.png"))); // NOI18N
        jLabel_stop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel_stopMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_stopMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_stopMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel_stopMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel_stopMousePressed(evt);
            }
        });

        jButton_fullscreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/design/fs.png"))); // NOI18N
        jButton_fullscreen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton_fullscreenMouseEntered(evt);
            }
        });
        jButton_fullscreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_fullscreenActionPerformed(evt);
            }
        });

        jLabel_play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/design/mcb_grey_pause_small.png"))); // NOI18N
        jLabel_play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_playMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_playMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel_playMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel_playMousePressed(evt);
            }
        });

        jLabel_next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/design/mcb_grey_fwd_small.png"))); // NOI18N
        jLabel_next.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_nextMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_nextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel_nextMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel_nextMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel_nextMouseReleased(evt);
            }
        });

        jLabel_prev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/design/mcb_grey_prev_small.png"))); // NOI18N
        jLabel_prev.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_prevMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel_prevMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel_prevMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel_prevMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel_prevMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel_play)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_stop)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel_time, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel_prev)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_next)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(jLabel_vol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSlider_vol, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jButton_fullscreen, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSlider_Media, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider_Media, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButton_fullscreen, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_play)
                                    .addComponent(jLabel_stop)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel_time)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel_prev, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel_next, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel_vol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSlider_vol, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                        .addGap(21, 21, 21))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        Instance_hold.getFsf().getMml().getTimer().cancel();
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        Ausblender ausblender = new Ausblender();
        Instance_hold.getFsf().getMml().setTimer(new Timer());
        Instance_hold.getFsf().getMml().getTimer().schedule(ausblender,2000);
        System.out.println("Exited");
    }//GEN-LAST:event_formMouseExited

    private void jSlider_volMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider_volMouseDragged
        vo_value = this.jSlider_vol.getValue();
        Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume(vo_value);
        Instance_hold.getMframe().getjSlider_vol().setValue(vo_value);
        Instance_hold.getPlayframe().getjSlider_vol().setValue(vo_value);
    }//GEN-LAST:event_jSlider_volMouseDragged

    private void jLabel_stopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_stopMouseClicked
        System.out.println("STOP");
        Instance_hold.getFsf().getEmpc().getMediaPlayer().stop();
        while(Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_grey_play_small());
        this.jSlider_Media.setValue(0);
        stop = true;
    }//GEN-LAST:event_jLabel_stopMouseClicked

    private void jLabel_stopMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_stopMouseEntered
        Instance_hold.getFsf().getMml().getTimer().cancel();
        this.jLabel_stop.setIcon(Instance_hold.getIm_hold().getMcb_blue_stop_small());
    }//GEN-LAST:event_jLabel_stopMouseEntered

    private void jLabel_stopMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_stopMouseExited
        this.jLabel_stop.setIcon(Instance_hold.getIm_hold().getMcb_grey_stop_small());
    }//GEN-LAST:event_jLabel_stopMouseExited

    private void jLabel_stopMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_stopMousePressed
        this.jLabel_stop.setIcon(Instance_hold.getIm_hold().getMcb_green_stop_small());
    }//GEN-LAST:event_jLabel_stopMousePressed

    private void jLabel_stopMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_stopMouseReleased
        this.jLabel_stop.setIcon(Instance_hold.getIm_hold().getMcb_blue_stop_small());
    }//GEN-LAST:event_jLabel_stopMouseReleased

    private void jButton_fullscreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_fullscreenActionPerformed
        File file = new File(Instance_data.getPlaypath());
        System.out.println(Instance_data.getPlaypath());
        Instance_hold.getFsnt().setVisible(false);
        Instance_hold.getFsf().setVisible(false);
        Instance_data.setMedia_time(Instance_hold.getFsf().getEmpc().getMediaPlayer().getTime());
        
        Instance_hold.getPlayframe().setVisible(true);
        if (Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
            Instance_hold.getFsf().getEmpc().getMediaPlayer().stop();
            Instance_hold.getPlayframe().getEmpc().getMediaPlayer().playMedia(Instance_data.getPlaypath());
            Instance_hold.getPlayframe().getEmpc().getMediaPlayer().setTime(Instance_data.getMedia_time());
            Instance_hold.getPlayframe().getEmpc().getMediaPlayer().setVolume(Instance_hold.getFsf().getEmpc().getMediaPlayer().getVolume());
            while(!Instance_hold.getPlayframe().getEmpc().getMediaPlayer().isPlaying() && file.exists()) {
                System.out.println("FSF:   WAITING TO START PLAYING:::::");
                try {
                    Thread.sleep(10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            Instance_hold.getPlayframe().getjLabel_play().setIcon(Instance_hold.getIm_hold().getMcb_grey_pause_small());
        }else {
            Instance_hold.getPlayframe().getjLabel_play().setIcon(Instance_hold.getIm_hold().getMcb_grey_play_small());
            
            Instance_hold.getPlayframe().getEmpc().getMediaPlayer().playMedia(Instance_data.getPlaypath());
            Instance_hold.getPlayframe().getEmpc().getMediaPlayer().setTime(Instance_data.getMedia_time());
            while(!Instance_hold.getPlayframe().getEmpc().getMediaPlayer().isPlaying() && file.exists()) {
                System.out.println("FSF:   WAITING TO START PLAYING:::::");
                try {
                    Thread.sleep(10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            Instance_hold.getPlayframe().getEmpc().getMediaPlayer().pause();
            while(Instance_hold.getPlayframe().getEmpc().getMediaPlayer().isPlaying()) {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            Instance_hold.getPlayframe().setStop(true);
        }        
        Instance_hold.getMframe().getClistener().setFullscreen(false);
    }//GEN-LAST:event_jButton_fullscreenActionPerformed

    private void jLabel_playMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_playMouseClicked
        int volume = 0;
        
        if (this.playcontrol) {
            this.setEnabled(false);
            
            System.out.println("Media Player State: " + Instance_hold.getFsf().getEmpc().getMediaPlayer().getMediaPlayerState());
             
            if (Instance_hold.getFsf().getEmpc().getMediaPlayer().getMediaPlayerState().toString().equals("libvlc_Stopped") && !Instance_hold.getPlay().isAlive()) {
                Instance_hold.getVplay_mon().setInterrupted_play(true);
            }else if(Instance_hold.getPlay().isAlive() && Instance_hold.getFsf().getEmpc().getMediaPlayer().getMediaPlayerState().toString().equals("libvlc_Ended")) {
                Instance_hold.getVplay_mon().setInterrupted_play(true);
            }else if (!Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying() && Instance_hold.getPlay().isAlive() && !Instance_hold.getFsf().getEmpc().getMediaPlayer().getMediaPlayerState().toString().equals("libvlc_Error") && !Instance_hold.getFsf().getEmpc().getMediaPlayer().getMediaPlayerState().toString().equals("false")) {
                
                this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_blue_pause_small());
                
                volume = Instance_hold.getFsf().getEmpc().getMediaPlayer().getVolume();
                Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume(0);
                
                System.out.println("Media Player State: " + Instance_hold.getFsf().getEmpc().getMediaPlayer().getMediaPlayerState());
                
                Instance_hold.getFsf().getEmpc().getMediaPlayer().start();

                for (int i=0;i<=volume;i++) {                    
                    Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume((Instance_hold.getFsf().getEmpc().getMediaPlayer().getVolume()+1));
                    try {
                        Thread.sleep(3);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
          
                stop = false;
            }
            else if (Instance_hold.getPlay().isAlive() && !Instance_hold.getFsf().getEmpc().getMediaPlayer().getMediaPlayerState().toString().equals("libvlc_Error") && !Instance_hold.getFsf().getEmpc().getMediaPlayer().getMediaPlayerState().toString().equals("false")) {
                this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_blue_play_small());
                
                volume = Instance_hold.getFsf().getEmpc().getMediaPlayer().getVolume();
                for (int i=0;i<200;i++) {                    
                    Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume((Instance_hold.getFsf().getEmpc().getMediaPlayer().getVolume()-1));
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                Instance_hold.getFsf().getEmpc().getMediaPlayer().pause();
                while(Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
               
                Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume(volume-1);
 
                stop = true;
            }else {
                Instance_hold.getFsf().getEmpc().getMediaPlayer().stop();
                while(Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_grey_play_small());
                this.jSlider_Media.setValue(0);
                stop = true;
            }
            this.setEnabled(true);
        }
    }//GEN-LAST:event_jLabel_playMouseClicked

    private void jLabel_playMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_playMouseEntered
        Instance_hold.getFsf().getMml().getTimer().cancel();
        if (stop) this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_blue_play_small());
        else this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_blue_pause_small());
    }//GEN-LAST:event_jLabel_playMouseEntered

    private void jLabel_playMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_playMouseExited
        if (stop) this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_grey_play_small());
        else this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_grey_pause_small());
    }//GEN-LAST:event_jLabel_playMouseExited

    private void jLabel_playMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_playMousePressed
        if (stop) {
            this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_green_play_small());
        }else {
            this.jLabel_play.setIcon(Instance_hold.getIm_hold().getMcb_green_pause_small());
        }
    }//GEN-LAST:event_jLabel_playMousePressed

    private void jLabel_timeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_timeMouseEntered
        Instance_hold.getFsf().getMml().getTimer().cancel();
    }//GEN-LAST:event_jLabel_timeMouseEntered

    private void jLabel_volMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_volMouseEntered
        Instance_hold.getFsf().getMml().getTimer().cancel();
    }//GEN-LAST:event_jLabel_volMouseEntered

    private void jSlider_volMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider_volMouseEntered
        Instance_hold.getFsf().getMml().getTimer().cancel();
    }//GEN-LAST:event_jSlider_volMouseEntered

    private void jButton_fullscreenMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_fullscreenMouseEntered
        Instance_hold.getFsf().getMml().getTimer().cancel();
    }//GEN-LAST:event_jButton_fullscreenMouseEntered

    private void jLabel_nextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_nextMouseReleased
        this.jLabel_next.setIcon(Instance_hold.getIm_hold().getMcb_blue_fwd_small());
    }//GEN-LAST:event_jLabel_nextMouseReleased

    private void jLabel_nextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_nextMouseClicked
        System.out.println("PLAYCONTROL: " + this.playcontrol);
        if (this.playcontrol) {
            this.playcontrol = false;

            Instance_hold.getMframe().getjProgressBar_main().setIndeterminate(true);
            this.setEnabled(false);
            MainControls.nextMedia();

            while(!Instance_hold.getPlayframe().getEmpc().getMediaPlayer().isPlaying() && !Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            this.setEnabled(true);
            this.playcontrol = true;
        }
    }//GEN-LAST:event_jLabel_nextMouseClicked

    private void jLabel_nextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_nextMouseEntered
        this.jLabel_next.setIcon(Instance_hold.getIm_hold().getMcb_blue_fwd_small());
    }//GEN-LAST:event_jLabel_nextMouseEntered

    private void jLabel_nextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_nextMouseExited
        this.jLabel_next.setIcon(Instance_hold.getIm_hold().getMcb_grey_fwd_small());
    }//GEN-LAST:event_jLabel_nextMouseExited

    private void jLabel_nextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_nextMousePressed
        this.jLabel_next.setIcon(Instance_hold.getIm_hold().getMcb_green_fwd_small());
    }//GEN-LAST:event_jLabel_nextMousePressed

    private void jLabel_prevMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_prevMouseReleased
        this.jLabel_prev.setIcon(Instance_hold.getIm_hold().getMcb_blue_prev_small());
    }//GEN-LAST:event_jLabel_prevMouseReleased

    private void jLabel_prevMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_prevMouseClicked
        System.out.println("PLAYCONTROL: " + this.playcontrol);
        if (this.playcontrol) {
            this.playcontrol = false;

            Instance_hold.getMframe().getjProgressBar_main().setIndeterminate(true);
            this.setEnabled(false);
            MainControls.prevMedia();

            while(!Instance_hold.getPlayframe().getEmpc().getMediaPlayer().isPlaying() && !Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            this.setEnabled(true);
            this.playcontrol = true;
        }
    }//GEN-LAST:event_jLabel_prevMouseClicked

    private void jLabel_prevMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_prevMouseEntered
        this.jLabel_prev.setIcon(Instance_hold.getIm_hold().getMcb_blue_prev_small());
    }//GEN-LAST:event_jLabel_prevMouseEntered

    private void jLabel_prevMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_prevMouseExited
        this.jLabel_prev.setIcon(Instance_hold.getIm_hold().getMcb_grey_prev_small());
    }//GEN-LAST:event_jLabel_prevMouseExited

    private void jLabel_prevMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_prevMousePressed
        this.jLabel_prev.setIcon(Instance_hold.getIm_hold().getMcb_green_prev_small());
    }//GEN-LAST:event_jLabel_prevMousePressed

    private void jSlider_MediaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider_MediaMouseEntered
        Instance_hold.getFsf().getMml().getTimer().cancel();
    }//GEN-LAST:event_jSlider_MediaMouseEntered

    private void jSlider_volMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider_volMousePressed
        final BasicSliderUI ui = (BasicSliderUI) jSlider_vol.getUI();
        
        Point p = evt.getPoint();
        int value = ui.valueForXPosition(p.x);

        jSlider_vol.setValue(value);
        Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume(value);
        Instance_hold.getMframe().getjSlider_vol().setValue(value);
        Instance_hold.getPlayframe().getjSlider_vol().setValue(value);
    }//GEN-LAST:event_jSlider_volMousePressed

    private void jSlider_MediaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider_MediaMousePressed
        final BasicSliderUI media_ui = (BasicSliderUI) jSlider_Media.getUI();
        Point p = evt.getPoint();
        int value = media_ui.valueForXPosition(p.x);
        
        System.out.println("SLIDER: " + ((double)((double)value/(double)jSlider_Media.getMaximum())*100));
        System.out.println("PROGRESS BAR: " + Instance_hold.getMframe().getjProgressBar_SCP().getValue());

        if (!Instance_data.isSkip()) {        
            if ((((double)((double)value/(double)jSlider_Media.getMaximum())*100)+5) < Instance_hold.getMframe().getjProgressBar_SCP().getValue()) {
                if (Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
                    int volume = 0;

                    volume = Instance_hold.getFsf().getEmpc().getMediaPlayer().getVolume();
                    Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume(0);

                    Instance_hold.getFsf().getEmpc().getMediaPlayer().pause();
                    while(Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    Instance_hold.getFsf().getEmpc().getMediaPlayer().setTime((int)(Instance_data.getMedia_length()*(double)((double)value/(double)jSlider_Media.getMaximum())));
                    Instance_hold.getFsf().getEmpc().getMediaPlayer().start();

                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for (int i=0;i<volume;i++) {                    
                        Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume((Instance_hold.getFsf().getEmpc().getMediaPlayer().getVolume()+1));
                        try {
                            Thread.sleep(9);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }else {
            if (Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
                int volume = 0;

                volume = Instance_hold.getFsf().getEmpc().getMediaPlayer().getVolume();
                Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume(0);

                Instance_hold.getFsf().getEmpc().getMediaPlayer().pause();
                while(Instance_hold.getFsf().getEmpc().getMediaPlayer().isPlaying()) {
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                Instance_hold.getFsf().getEmpc().getMediaPlayer().setTime((int)(Instance_data.getMedia_length()*(double)((double)value/(double)jSlider_Media.getMaximum())));
                Instance_hold.getFsf().getEmpc().getMediaPlayer().start();

                try {
                    Thread.sleep(40);
                } catch (InterruptedException ex) {
                    Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (int i=0;i<volume;i++) {                    
                    Instance_hold.getFsf().getEmpc().getMediaPlayer().setVolume((Instance_hold.getFsf().getEmpc().getMediaPlayer().getVolume()+1));
                    try {
                        Thread.sleep(9);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FS_Navi_Tab.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_jSlider_MediaMousePressed

    public JSlider getjSlider_Media() {
        return jSlider_Media;
    }

    public JSlider getjSlider_vol() {
        return jSlider_vol;
    }
    
    public JLabel getjLabel_time() {
        return jLabel_time;
    }    

    public void setjLabel_time(JLabel jLabel_time) {
        this.jLabel_time = jLabel_time;
    }

    public JLabel getjLabel_play() {
        return jLabel_play;
    }

    public void setStop(boolean stop) {
        this.stop = stop;
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_fullscreen;
    private javax.swing.JLabel jLabel_next;
    private javax.swing.JLabel jLabel_play;
    private javax.swing.JLabel jLabel_prev;
    private javax.swing.JLabel jLabel_stop;
    private javax.swing.JLabel jLabel_time;
    private javax.swing.JLabel jLabel_vol;
    private javax.swing.JSlider jSlider_Media;
    private javax.swing.JSlider jSlider_vol;
    // End of variables declaration//GEN-END:variables
}